# -*- coding: utf-8 -*-
"""ДЗ6_Кравченко Сергій.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XQEHzrwc-huDbwqQXB47SivYrwWImEJU

# Домашнє завдання. Інтегральне обчислення. Чисельне інтегрування

**Опис домашнього завдання**

Ти замовив/-ла виконання дослідження ефективності роботи співробітників і отримав/-ла наближену залежність ефективності роботи (кількість тасків за одиницю часу) від часу доби, за умови, що завдання однакові за складністю.
\
$$
2\left(\frac{4}{1.2\sqrt{2\pi }}e^{- \frac{1}{2}\left(\frac{x - 11}{1.2}\right)^2} + \frac{7}{2.4\sqrt{2\pi }}e^{- \frac{1}{2}\left(\frac{x - 15}{2.4}\right)^2}\right)
$$
\
$\boldsymbol П\boldsymbol р\boldsymbol и\boldsymbol м\boldsymbol і\boldsymbol т\boldsymbol к\boldsymbol а*\ldotp$  Форма функції наближено відповідає реальним спостереженням, але функція була спрощена для легшого опрацювання.

Позначимо початок і кінець робочого дня як a=9 та b=18 відповідно.

Тобі буде потрібно порахувати середню кількість тасків, виконаних упродовж робочого дня (в робочі години з 9 до 18).

Завдання 1

Візуалізуй функцію на відрізку від 0 до 24. За допомогою SymPy порахуй невизначений інтеграл функції та інтеграл від a до b.
"""

#Обчислення інтегралів

import sympy as sp

# Оголошення змінної x
x = sp.Symbol('x')

# Визначення функції ефективності
efficiency_func = 2 * ((4 / (1.2 * sp.sqrt(2 * sp.pi))) * sp.exp(-0.5 * ((x - 11) / 1.2) ** 2) +
                       (7 / (2.4 * sp.sqrt(2 * sp.pi))) * sp.exp(-0.5 * ((x - 15) / 2.4) ** 2))

# Обчислення невизначеного інтегралу
indefinite_integral = sp.integrate(efficiency_func, x)
indefinite_integral

# Обчислення визначеного інтегралу від 9 до 18
a, b = 9, 18
definite_integral = sp.integrate(efficiency_func, (x, a, b))
definite_integral.evalf()

import numpy as np
import matplotlib.pyplot as plt
import sympy as sp

# 1. Візуалізація функції на відрізку від 0 до 24

# Діапазон часу
x_vals = np.linspace(0, 24, 1000)

# Функція ефективності
def efficiency(x):
    term1 = (4 / (1.2 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 11) / 1.2) ** 2)
    term2 = (7 / (2.4 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 15) / 2.4) ** 2)
    return 2 * (term1 + term2)

# Обчислення значень функції
y_vals = efficiency(x_vals)

# Побудова графіка
plt.figure(figsize=(12, 6))
plt.plot(x_vals, y_vals, label='Ефективність роботи')
plt.title('Ефективність роботи співробітників протягом доби')
plt.xlabel('Час доби, години')
plt.ylabel('Кількість тасків за одиницю часу')
plt.axvline(x=9, color='r', linestyle='--', label='Початок робочого дня')
plt.axvline(x=18, color='g', linestyle='--', label='Кінець робочого дня')
plt.grid(True)
plt.legend()
plt.show()

# 2. Обчислення невизначеного інтегралу за допомогою SymPy

# Символічна змінна
x = sp.Symbol('x')

# Параметри функції
a1 = 4
sigma1 = 1.2
mu1 = 11

a2 = 7
sigma2 = 2.4
mu2 = 15

# Символічна функція
term1_sym = (a1 / (sigma1 * sp.sqrt(2 * sp.pi))) * sp.exp(-0.5 * ((x - mu1) / sigma1) ** 2)
term2_sym = (a2 / (sigma2 * sp.sqrt(2 * sp.pi))) * sp.exp(-0.5 * ((x - mu2) / sigma2) ** 2)
f = 2 * (term1_sym + term2_sym)

# Невизначений інтеграл
indef_integral = sp.integrate(f, x)

print('Невизначений інтеграл:')
sp.pprint(indef_integral)
print('\n')

# 3. Обчислення визначеного інтегралу від a=9 до b=18

# Межі інтегрування
a_value = 9
b_value = 18

# Визначений інтеграл
definite_integral = sp.integrate(f, (x, a_value, b_value))

# Числове значення
result = definite_integral.evalf()

print(f'Визначений інтеграл від {a_value} до {b_value}:')
print(result)

"""Завдання 2

Напиши функцію чисельного інтегрування методом прямокутників та порахуй інтеграл від a до b.
"""

import numpy as np

# 1. Визначення функції ефективності
def efficiency(x):
    term1 = (4 / (1.2 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 11) / 1.2) ** 2)
    term2 = (7 / (2.4 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 15) / 2.4) ** 2)
    return 2 * (term1 + term2)

# 2. Функція чисельного інтегрування методом прямокутників
def rectangle_integration(f, a, b, n):
    """
    Чисельне інтегрування методом лівих прямокутників.

    Параметри:
    - f: функція для інтегрування
    - a: нижня межа інтегрування
    - b: верхня межа інтегрування
    - n: кількість інтервалів

    Повертає:
    - Значення чисельного інтегралу
    """
    dx = (b - a) / n  # Ширина кожного інтервалу
    x = np.linspace(a, b - dx, n)  # Ліві кінці інтервалів
    y = f(x)
    integral = np.sum(y * dx)
    return integral

# 3. Обчислення інтегралу
a = 9
b = 18
n = 1000  # Кількість інтервалів

numerical_integral = rectangle_integration(efficiency, a, b, n)

print(f'Чисельне значення інтегралу від {a} до {b} методом прямокутників з n={n}:')
print(numerical_integral)

"""Завдання 3

Напиши функцію чисельного інтегрування методом трапецій та порахуй інтеграл від a до b.
"""

import numpy as np

# 1. Визначення функції ефективності
def efficiency(x):
    term1 = (4 / (1.2 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 11) / 1.2) ** 2)
    term2 = (7 / (2.4 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 15) / 2.4) ** 2)
    return 2 * (term1 + term2)

# 2. Функція чисельного інтегрування методом трапецій
def trapezoidal_integration(f, a, b, n):
    """
    Чисельне інтегрування методом трапецій.

    Параметри:
    - f: функція для інтегрування
    - a: нижня межа інтегрування
    - b: верхня межа інтегрування
    - n: кількість інтервалів

    Повертає:
    - Значення чисельного інтегралу
    """
    dx = (b - a) / n  # Ширина кожного інтервалу
    x = np.linspace(a, b, n + 1)  # Точки розбиття
    y = f(x)
    integral = (dx / 2) * (y[0] + 2 * np.sum(y[1:-1]) + y[-1])
    return integral

# 3. Обчислення інтегралу
a = 9
b = 18
n = 1000  # Кількість інтервалів

numerical_integral = trapezoidal_integration(efficiency, a, b, n)

print(f'Чисельне значення інтегралу від {a} до {b} методом трапецій з n={n}:')
print(numerical_integral)

"""Завдання 4

Напиши функцію чисельного інтегрування методом Сімпсона та порахуй інтеграл від a до b.
"""

import numpy as np

# 1. Визначення функції ефективності
def efficiency(x):
    term1 = (4 / (1.2 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 11) / 1.2) ** 2)
    term2 = (7 / (2.4 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 15) / 2.4) ** 2)
    return 2 * (term1 + term2)

# 2. Функція чисельного інтегрування методом Сімпсона
def simpson_integration(f, a, b, n):
    """
    Чисельне інтегрування методом Сімпсона.

    Параметри:
    - f: функція для інтегрування
    - a: нижня межа інтегрування
    - b: верхня межа інтегрування
    - n: кількість інтервалів (повинна бути парною)

    Повертає:
    - Значення чисельного інтегралу
    """
    if n % 2 == 1:
        raise ValueError("Кількість інтервалів n повинна бути парною для методу Сімпсона.")

    dx = (b - a) / n  # Ширина кожного інтервалу
    x = np.linspace(a, b, n + 1)  # Точки розбиття
    y = f(x)

    integral = dx / 3 * (y[0] + 2 * np.sum(y[2:n:2]) + 4 * np.sum(y[1:n:2]) + y[n])

    return integral

# 3. Обчислення інтегралу
a = 9
b = 18
n = 1000  # Кількість інтервалів (повинна бути парною)

numerical_integral = simpson_integration(efficiency, a, b, n)

print(f'Чисельне значення інтегралу від {a} до {b} методом Сімпсона з n={n}:')
print(numerical_integral)

"""Завдання 5

Порахуй інтеграл від a до b за допомогою функції scipy.integrate.quad.
"""

import numpy as np
from scipy.integrate import quad

# 1. Визначення функції ефективності
def efficiency(x):
    term1 = (4 / (1.2 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 11) / 1.2) ** 2)
    term2 = (7 / (2.4 * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - 15) / 2.4) ** 2)
    return 2 * (term1 + term2)

# 2. Параметри інтегрування
a = 9    # Початок робочого дня
b = 18   # Кінець робочого дня

# 3. Обчислення інтегралу за допомогою scipy.integrate.quad
integral_value, error = quad(efficiency, a, b)

# 4. Виведення результату
print(f'Значення інтегралу від {a} до {b} за допомогою scipy.integrate.quad:')
print(f'Інтеграл = {integral_value}')
print(f'Оцінка абсолютної похибки = {error}')