# -*- coding: utf-8 -*-
"""–î–ó1_–ö—Ä–∞–≤—á–µ–Ω–∫–æ –°–µ—Ä–≥—ñ–π –°–µ—Ä–≥—ñ–π–æ–≤–∏—á.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G0lBmRnHLMpF1HYY_OWvNecC6NvgiB_c

# –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–æ Markdown

–ù–∞–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –≤
[Markdown](https://colab.research.google.com/notebooks/markdown_guide.ipynb) (LaTeX):

Markdown | Preview
--- | ---
`**bold text**` | **bold text**
 \\$\frac{x}{y}\\$ | $\frac{x}{y}$
 \\$p^{x}_{y}\\$ | $p^{x}_{y}$
\\$x \cdot y\\$ | $x \cdot y$
\\$\sqrt{x}\\$ | $\sqrt{x}$
\\$\pi\\$ | $\pi$
\\$\approx\\$ | $\approx$

–Ü —â–µ –¥–µ–∫—ñ–ª—å–∫–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤:

```markdown
$y=x^2$

$e^{i\pi} + 1 = 0$

$e^x=\sum_{i=0}^\infty \frac{1}{i!}x^i$

$\frac{n!}{k!(n-k)!} = {n \choose k}$

$A_{m,n} =
 \begin{pmatrix}
  a_{1,1} & a_{1,2} & \cdots & a_{1,n} \\
  a_{2,1} & a_{2,2} & \cdots & a_{2,n} \\
  \vdots  & \vdots  & \ddots & \vdots  \\
  a_{m,1} & a_{m,2} & \cdots & a_{m,n}
 \end{pmatrix}$

 $$
 I =
 \left (\begin{array}{cc}
 1 & 0\\
 0 & 1
 \end{array}\right)
 $$
```

$y=x^2$

$e^{i\pi} + 1 = 0$

$e^x=\sum_{i=0}^\infty \frac{1}{i!}x^i$

$\frac{n!}{k!(n-k)!} = {n \choose k}$

$A_{m,n} =
 \begin{pmatrix}
  a_{1,1} & a_{1,2} & \cdots & a_{1,n} \\
  a_{2,1} & a_{2,2} & \cdots & a_{2,n} \\
  \vdots  & \vdots  & \ddots & \vdots  \\
  a_{m,1} & a_{m,2} & \cdots & a_{m,n}
 \end{pmatrix}$

$I =
\left (\begin{array}{cc}
1 & 0\\
0 & 1
\end{array}\right)$
 ---

# –ó–∞–≤–¥–∞–Ω–Ω—è 1.
–í —à–∞–±–ª–æ–Ω—ñ –Ω–∞–≤–µ–¥–µ–Ω—ñ —á–∏—Å–ª–æ–≤—ñ –≤–µ–∫—Ç–æ—Ä–∏ $\overline{a}$ —Ç–∞ $\overline{b}$. –ü–æ—Ä–∞—Ö—É–π –Ω–∞—Å—Ç—É–ø–Ω–µ:
- —Å—É–º–∞ $\overline{a}$ —Ç–∞ $\overline{b}$
- —Ä—ñ–∑–Ω–∏—Ü—è $\overline{a}$ —Ç–∞ $\overline{b}$
- —Å—É–º–∞ $\overline{a}$ —Ç–∞ $\overline{b}^T$. –ü–æ—è—Å–Ω–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
- –º–∞—Ç—Ä–∏—á–Ω–∏–π –¥–æ–±—É—Ç–æ–∫ (dot product) $\overline{a}$ —Ç–∞ $\overline{b}^T$.
- –º–∞—Ç—Ä–∏—á–Ω–∏–π –¥–æ–±—É—Ç–æ–∫ (dot product) $\overline{a}$ —Ç–∞ $\overline{b}$. –ü–æ—è—Å–Ω–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
- –¥–æ–±—É—Ç–æ–∫ –ê–¥–∞–º–∞—Ä–∞ (Hadamard product) $\overline{a}$ —Ç–∞ $\overline{b}$. –ü–æ—è—Å–Ω–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
- –¥—ñ–ª–µ–Ω–Ω—è $\overline{a}$ —Ç–∞ $\overline{b}$. –ü–æ—è—Å–Ω–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
- –¥—ñ–ª–µ–Ω–Ω—è $\overline{a}$ —Ç–∞ $\overline{b}^T$. –ü–æ—è—Å–Ω–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
"""

import numpy as np
# –ö–æ–¥ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä—ñ–≤ –Ω–µ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏
a = np.array([[1, 2, 3, 4, 5]])
b = np.array([[1/2, 1, 2, 3, 4]])

res = (a + b)
res

res = a - b
res

#b —î –æ–¥–Ω–æ—Ä—è–¥–∫–æ–≤–∏–º –º–∞—Å–∏–≤–æ–º –∑ —Ñ–æ—Ä–º–æ—é ( (1, 5) ), —Ç–æ–±—Ç–æ –≤ –Ω—å–æ–º—É —î –æ–¥–∏–Ω —Ä—è–¥–æ–∫ —ñ –ø'—è—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤. –ö–æ–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ–Ω—É—é b –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é b.T, —Ç–æ –æ—Ç—Ä–∏–º—É—é –≤–µ–∫—Ç–æ—Ä-—Å—Ç–æ–≤–ø–µ—Ü—å –∑ —Ñ–æ—Ä–º–æ—é ( (5, 1) ), —ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –±—É–¥—É—Ç—å —Ä–æ–∑–º—ñ—â–µ–Ω—ñ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ.
res = a + b.T
res

#
res = np.dot(a, b.T)
res

# –ü–æ—è—Å–Ω–µ–Ω–Ω—è:  —ó—Ö –Ω–µ –º–æ–∂–Ω–∞ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –ø–µ—Ä–µ–º–Ω–æ–∂–∏—Ç–∏ –º–µ—Ç–æ–¥–æ–º np.dot, –æ—Å–∫—ñ–ª—å–∫–∏ –¥–ª—è —Ç–∞–∫–æ–≥–æ –º–Ω–æ–∂–µ–Ω–Ω—è:–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ —É a (5) –ø–æ–≤–∏–Ω–Ω–∞ –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤ —É b (–∞–ª–µ —É b —ó—Ö —Ç–µ–∂ 5, –∞ –Ω–µ 1, —è–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ). O–±–∏–¥–≤–∞ –≤–µ–∫—Ç–æ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏ –æ–¥–Ω–æ–º—ñ—Ä–Ω–∏–º–∏ –∞–±–æ –æ–¥–∏–Ω –∑ –Ω–∏—Ö —Ç—Ä–∞–Ω—Å–ø–æ–Ω—É–≤–∞—Ç–∏
res = np.dot(a,b)
res

# –ü–æ—è—Å–Ω–µ–Ω–Ω—è: –î–æ–±—É—Ç–æ–∫ –ê–¥–∞–º–∞—Ä–∞ –ø–µ—Ä–µ–¥–±–∞—á–∞—î –ø–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–µ –º–Ω–æ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–≤–æ—Ö –≤–µ–∫—Ç–æ—Ä—ñ–≤.
res = a * b
res

# –ü–æ—è—Å–Ω–µ–Ω–Ω—è: –ü–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–µ –¥—ñ–ª–µ–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ a –Ω–∞ –≤–µ–∫—Ç–æ—Ä b –¥–∞—î –Ω–æ–≤–∏–π –≤–µ–∫—Ç–æ—Ä, –¥–µ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥—ñ–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ a —Ç–∞ b.
res = a / b
res

# –ü–æ—è—Å–Ω–µ–Ω–Ω—è: –í–µ–∫—Ç–æ—Ä–∏ a (—Ä–æ–∑–º—ñ—Ä–æ–º 1x5) —Ç–∞ b (—Ä–æ–∑–º—ñ—Ä–æ–º 1x5). –¢—Ä–∞–Ω—Å–ø–æ–Ω—É–≤–∞–Ω–Ω—è –≤–µ–∫—Ç–æ—Ä–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –π–æ–≥–æ –≤ –≤–µ–∫—Ç–æ—Ä-—Å—Ç–æ–≤–ø–µ—Ü—å ùëèùëá (—Ä–æ–∑–º—ñ—Ä–æ–º 5x1). –ê –ø–æ—Ç—ñ–º –≤–∏–∫–æ–Ω—É—î–º–æ –¥—ñ–ª–µ–Ω–Ω—è.
res = a / b_T
res

"""# –ó–∞–≤–¥–∞–Ω–Ω—è 2
–í —Ü—å–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ —Ç–∏ –Ω–∞–≤—á–∏—à—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤–µ–∫—Ç–æ—Ä–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∞—Ñ—ñ–Ω–Ω–∏—Ö –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω—å.  
–î–∞–Ω–æ –≤–µ–∫—Ç–æ—Ä:
$$
x =
\left(\begin{array}{cc}
2\\
1
\end{array}\right)
$$


–í–∏–∫–æ–Ω–∞–π –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–¥–∞–≤—à–∏ –º–∞—Ç—Ä–∏—Ü—é –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞—Å—Ç–æ—Å—É–π —ó—ó –¥–æ –≤–µ–∫—Ç–æ—Ä–∞ $x$:

1. –ó–º–µ–Ω—à–∏ –≤–µ–∫—Ç–æ—Ä $x$ –≤ 2 —Ä–∞–∑–∏ –ø–æ –≤—ñ—Å—ñ $OX$ —Ç–∞ –∑–±—ñ–ª—å—à –≤ 3 —Ä–∞–∑–∏ –ø–æ –≤—ñ—Å—ñ $OY$.
2. –í—ñ–¥–æ–±—Ä–∞–∑–∏ –≤–µ–∫—Ç–æ—Ä $x$ –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ—á–∞—Ç–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
3. –ü–µ—Ä–µ–Ω–µ—Å–∏ –≤–µ–∫—Ç–æ—Ä $x$ –Ω–∞ -3 –ø–æ –≤—ñ—Å—ñ $OX$ —Ç–∞ –Ω–∞ 1 –ø–æ –≤—ñ—Å—ñ $OY$.
4. –ó–º—ñ—Å—Ç–∏ –≤–µ–∫—Ç–æ—Ä $x$ –Ω–∞ 60¬∞ –ø–æ –≤—ñ—Å—ñ $OY$.
5. –ü–æ–≤–µ—Ä–Ω–∏ –≤–µ–∫—Ç–æ—Ä $x$ –Ω–∞ 30¬∞.
6. –û–±'—î–¥–Ω–∞–π –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ –∫—Ä–æ–∫—ñ–≤ 1, 2, 4, 5 –≤ –æ–¥–Ω—É –º–∞—Ç—Ä–∏—Ü—é —Ç–∞ –∑–∞—Å—Ç–æ—Å—É–π —ó—ó –¥–æ –≤–µ–∫—Ç–æ—Ä—É $x$.

#### 2.1 –ó–º–µ–Ω—à–∏ –≤–µ–∫—Ç–æ—Ä  $x$  –≤ 2 —Ä–∞–∑–∏ –ø–æ –≤—ñ—Å—ñ  OX  —Ç–∞ –∑–±—ñ–ª—å—à –≤ 3 —Ä–∞–∑–∏ –ø–æ –≤—ñ—Å—ñ  OY .

$$
M_1 =
\left (\begin{array}{cc}
\frac{1}{2} & 0\\  
0 & 3
\end{array}\right)
$$

$$
M_1x =
\left(\begin{array}{cc}
\frac{1}{2} & 0\\  
0 & 3
\end{array}\right)
\left (\begin{array}{cc}
2\\
1
\end{array}\right)=
\left(\begin{array}{cc}
\frac{1}{2} \cdot 2 + 0 \cdot 1\\
0 \cdot 2 + 3 \cdot 1
\end{array}\right)=
\left(\begin{array}{cc}
1\\
3
\end{array}\right)
$$

#### 2.2 –í—ñ–¥–æ–±—Ä–∞–∑–∏ –≤–µ–∫—Ç–æ—Ä $x$ –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ—á–∞—Ç–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.

$$
M_2 =
\begin{pmatrix}
-1 & 0 \\
0 & -1
\end{pmatrix}, \quad
M_2 x =
\begin{pmatrix}
-1 & 0 \\
0 & -1
\end{pmatrix}
\begin{pmatrix}
2 \\
1
\end{pmatrix}
=
\begin{pmatrix}
-1 \cdot 2 + 0 \cdot 1 \\
0 \cdot 2 + (-1) \cdot 1
\end{pmatrix}
=
\begin{pmatrix}
-2 \\
-1
\end{pmatrix}
$$

#### 2.3 –ü–µ—Ä–µ–Ω–µ—Å–∏ –≤–µ–∫—Ç–æ—Ä $x$, –∑–∞–¥–∞–≤—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –º–∞—Ç—Ä–∏—Ü—é —ñ –ø–æ–º–Ω–æ–∂–∏–≤—à–∏ –Ω–∞ –Ω–µ—ó,  –Ω–∞ -3 –ø–æ –≤—ñ—Å—ñ $OX$ —Ç–∞ –Ω–∞ 1 –ø–æ –≤—ñ—Å—ñ $OY$.
"""



"""$$
M_3 =
\begin{pmatrix}
1 & 0 & -3 \\
0 & 1 & 1 \\
0 & 0 & 1
\end{pmatrix}, \quad
x =
\begin{pmatrix}
2 \\
1 \\
1
\end{pmatrix}, \quad
M_3 x =
\begin{pmatrix}
1 & 0 & -3 \\
0 & 1 & 1 \\
0 & 0 & 1
\end{pmatrix}
\begin{pmatrix}
2 \\
1 \\
1
\end{pmatrix}
=
\begin{pmatrix}
1 \cdot 2 + 0 \cdot 1 + (-3) \cdot 1 \\
0 \cdot 2 + 1 \cdot 1 + 1 \cdot 1 \\
0 \cdot 2 + 0 \cdot 1 + 1 \cdot 1
\end{pmatrix}
=
\begin{pmatrix}
-1 \\
2 \\
1
\end{pmatrix}
$$

"""



"""#### 2.4 –ó–º—ñ—Å—Ç–∏ –≤–µ–∫—Ç–æ—Ä $x$ –Ω–∞ 60¬∞ –ø–æ –≤—ñ—Å—ñ $OY$.

$$
M_4 =
\begin{pmatrix}
1 & 0 \\
\tan(\theta) & 1
\end{pmatrix}
=
\begin{pmatrix}
1 & 0 \\
\tan\frac{\pi}{3} & 1
\end{pmatrix}
=
\begin{pmatrix}
1 & 0 \\
\sqrt{3} & 1
\end{pmatrix}, \quad
M_4 x =
\begin{pmatrix}
1 & 0 \\
\sqrt{3} & 1
\end{pmatrix}
\cdot
\begin{pmatrix}
2 \\
1
\end{pmatrix}
=
\begin{pmatrix}
1 \cdot 2 + 0 \cdot 1 \\
\sqrt{3} \cdot 2 + 1 \cdot 1
\end{pmatrix}
=
\begin{pmatrix}
2 \\
2 \sqrt{3} + 1
\end{pmatrix}
$$

#### 2.5 –ü–æ–≤–µ—Ä–Ω–∏ –≤–µ–∫—Ç–æ—Ä $x$ –Ω–∞ 30¬∞.
"""



"""$$
M_5 =
\begin{pmatrix}
\cos\left(\frac{\pi}{6}\right) & -\sin\left(\frac{\pi}{6}\right) \\
\sin\left(\frac{\pi}{6}\right) & \cos\left(\frac{\pi}{6}\right)
\end{pmatrix}
=
\begin{pmatrix}
\frac{\sqrt{3}}{2} & -\frac{1}{2} \\
\frac{1}{2} & \frac{\sqrt{3}}{2}
\end{pmatrix}, \quad
M_5 x =
\begin{pmatrix}
\frac{\sqrt{3}}{2} & -\frac{1}{2} \\
\frac{1}{2} & \frac{\sqrt{3}}{2}
\end{pmatrix}
\begin{pmatrix}
2 \\
1
\end{pmatrix}
=
\begin{pmatrix}
\frac{\sqrt{3}}{2} \cdot 2 + \left(-\frac{1}{2}\right) \cdot 1 \\
\frac{1}{2} \cdot 2 + \frac{\sqrt{3}}{2} \cdot 1
\end{pmatrix}
=
\begin{pmatrix}
\sqrt{3} - \frac{1}{2} \\
1 + \frac{\sqrt{3}}{2}
\end{pmatrix}
$$

"""



"""#### 2.6 –û–±'—î–¥–Ω–∞–π –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ –∫—Ä–æ–∫—ñ–≤ 1, 2, 4, 5 –≤ –æ–¥–Ω—É –º–∞—Ç—Ä–∏—Ü—é —Ç–∞ –∑–∞—Å—Ç–æ—Å—É–π —ó—ó –¥–æ –≤–µ–∫—Ç–æ—Ä—É $x$.

$$
M_6 = M_5 \cdot M_4 \cdot M_2 \cdot M_1 = ?
$$

$$
M_6 =
\begin{pmatrix}
\sqrt{3} - \frac{1}{2} \\
1 + \frac{\sqrt{3}}{2}
\end{pmatrix}
\cdot
\begin{pmatrix}
1 - \frac{\sqrt{3}}{2} \\
\sqrt{3} + \frac{1}{2}
\end{pmatrix}
\cdot
\begin{pmatrix}
-2 \\
-1
\end{pmatrix}
\cdot
\begin{pmatrix}
1 \\
3
\end{pmatrix}
M_6 = 2\sqrt{3} - \frac{7}{2}
$$
"""



"""# –ó–∞–≤–¥–∞–Ω–Ω—è 2 (–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–µ)"""

!pip install cairosvg

import cv2 as cv
import urllib.request
import numpy as np
from google.colab.patches import cv2_imshow as cv_imshow
import cairosvg

def read_svg_image_by_url(url):
    try:
        # Use a context manager to handle the URL request
        with urllib.request.urlopen(url) as req:
            svg_data = req.read()

        # Convert SVG data directly to PNG bytes using cairosvg
        png_data = cairosvg.svg2png(bytestring=svg_data)

        # Decode the PNG bytes directly into an OpenCV image
        nparr = np.frombuffer(png_data, np.uint8)
        img = cv.imdecode(nparr, cv.IMREAD_COLOR)
        return img

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∞–±–æ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        return None

url = 'https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg'

img = read_svg_image_by_url(url)

if img is not None:
    cv_imshow(img)
else:
    print("–ù–µ–º–æ–∂–ª–∏–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")

import cv2 as cv
import numpy as np
from google.colab.patches import cv2_imshow as cv_imshow

def rotate_and_scale_image_manual(image, angle_degrees, scale_x, scale_y):
    # Get image dimensions
    height, width = image.shape[:2]

    # Convert angle from degrees to radians
    angle_radians = np.deg2rad(angle_degrees)

    # Calculate the center of the image
    center_x, center_y = width / 2, height / 2

    # Create the rotation matrix manually
    cos_theta = np.cos(angle_radians)
    sin_theta = np.sin(angle_radians)

    # Construct the rotation matrix around the image center
    rotation_matrix = np.array([
        [cos_theta, -sin_theta, (1 - cos_theta) * center_x + sin_theta * center_y],
        [sin_theta, cos_theta, (1 - cos_theta) * center_y - sin_theta * center_x],
        [0, 0, 1]
    ], dtype=np.float32)

    # Create the scaling matrix
    scaling_matrix = np.array([
        [scale_x, 0, center_x * (1 - scale_x)],
        [0, scale_y, center_y * (1 - scale_y)],
        [0, 0, 1]
    ], dtype=np.float32)

    # Combine the rotation and scaling matrices
    transformation_matrix = np.dot(rotation_matrix, scaling_matrix)

    # Apply the perspective transformation
    transformed_image = cv.warpPerspective(image, transformation_matrix, (width, height))

    return transformed_image

# Example usage:
# Assume 'img' is your input image loaded via OpenCV

# Rotate and scale the image
rotated_scaled_img = rotate_and_scale_image_manual(img, angle_degrees=30, scale_x=0.5, scale_y=0.33)

# Display the transformed image
cv_imshow(rotated_scaled_img)

import cv2 as cv
import numpy as np
from google.colab.patches import cv2_imshow
import urllib.request
import cairosvg

def read_svg_image_by_url(url):
    try:
        with urllib.request.urlopen(url) as req:
            svg_data = req.read()

        # Convert SVG data directly to PNG bytes using cairosvg
        png_data = cairosvg.svg2png(bytestring=svg_data)

        # Decode the PNG bytes directly into an OpenCV image
        nparr = np.frombuffer(png_data, np.uint8)
        img = cv.imdecode(nparr, cv.IMREAD_COLOR)
        return img

    except Exception as e:
        print(f"Error while loading or processing the image: {e}")
        return None

def rotate_image_around_y_axis(image, angle_degrees):
    # Convert angle from degrees to radians
    angle_radians = np.deg2rad(angle_degrees)

    # Get image dimensions
    h, w = image.shape[:2]

    # Calculate focal length (adjust as needed)
    f = w / (2.0 * np.tan(np.deg2rad(45) / 2))

    # Projection matrix 2D -> 3D
    A1 = np.array([
        [1, 0, -w / 2],
        [0, 1, -h / 2],
        [0, 0, 0],
        [0, 0, 1]
    ])

    # Rotation matrix around Y-axis
    R = np.array([
        [np.cos(angle_radians), 0, np.sin(angle_radians), 0],
        [0, 1, 0, 0],
        [-np.sin(angle_radians), 0, np.cos(angle_radians), 0],
        [0, 0, 0, 1]
    ])

    # Translation matrix (no translation)
    T = np.array([
        [1, 0, 0, 0],
        [0, 1, 0, 0],
        [0, 0, 1, f],
        [0, 0, 0, 1]
    ])

    # Projection matrix 3D -> 2D
    A2 = np.array([
        [f, 0, w / 2, 0],
        [0, f, h / 2, 0],
        [0, 0, 1, 0]
    ])

    # Combined transformation matrix
    trans = A2 @ T @ R @ A1

    # Apply perspective warp
    transformed_image = cv.warpPerspective(image, trans, (w, h))

    return transformed_image

# URL of the SVG image
svg_url = 'https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg'

# Load SVG image from URL
img = read_svg_image_by_url(svg_url)

if img is None:
    print("Error: Unable to load image.")
else:
    # Rotate the image around Y-axis by 60 degrees
    rotated_img = rotate_image_around_y_axis(img, 60)

    # Display the transformed image
    cv_imshow(rotated_img)

import cv2 as cv
import numpy as np
from google.colab.patches import cv2_imshow as cv_imshow
import urllib.request
import io
from PIL import Image
import cairosvg

def scale_image_manual(image, scale_x, scale_y):
    # Get image dimensions
    height, width = image.shape[:2]

    # Calculate new dimensions
    new_width = int(width * scale_x)
    new_height = int(height * scale_y)

    # Calculate the center of the image
    center_x, center_y = width / 2, height / 2
    new_center_x, new_center_y = new_width / 2, new_height / 2

    # Create the scaling matrix in homogeneous coordinates
    scaling_matrix = np.array([
        [scale_x, 0, new_center_x - scale_x * center_x],
        [0, scale_y, new_center_y - scale_y * center_y],
        [0, 0, 1]
    ], dtype=np.float32)

    # Apply the perspective transformation with new dimensions
    transformed_image = cv.warpPerspective(image, scaling_matrix, (new_width, new_height))

    return transformed_image

# Install cairosvg if not already installed
try:
    import cairosvg
except ImportError:
    !pip install cairosvg
    import cairosvg

# Load your image from URL
image_url = 'https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg'

try:
    # Download the SVG data
    with urllib.request.urlopen(image_url) as response:
        svg_data = response.read()

    # Convert SVG data to PNG bytes using cairosvg
    png_data = cairosvg.svg2png(bytestring=svg_data)

    # Convert PNG bytes to OpenCV image
    nparr = np.frombuffer(png_data, np.uint8)
    img = cv.imdecode(nparr, cv.IMREAD_UNCHANGED)

except Exception as e:
    print(f"Error loading image: {e}")
    img = None

if img is not None:
    # Scale the image: Reduce by 2 times along OX and increase by 3 times along OY
    scaled_img = scale_image_manual(img, scale_x=0.5, scale_y=3.0)

    # Display the original and scaled images
    print("Original Image:")
    cv_imshow(img)
    print("Scaled Image:")
    cv_imshow(scaled_img)
else:
    print("Failed to load the image.")

import cv2 as cv
import numpy as np
from google.colab.patches import cv2_imshow as cv_imshow
import urllib.request
import io
from PIL import Image
import cairosvg

def reflect_image_origin(image):
    # Get image dimensions
    height, width = image.shape[:2]

    # Create the reflection matrix
    reflection_matrix = np.array([
        [-1,  0,  width],
        [ 0, -1, height],
        [ 0,  0,     1 ]
    ], dtype=np.float32)

    # Apply the perspective transformation
    reflected_image = cv.warpPerspective(image, reflection_matrix, (width, height))

    return reflected_image

# Load the image
import urllib.request

# Use a valid SVG image URL
image_url = 'https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg'

try:
    # Read the SVG image data from the URL
    with urllib.request.urlopen(image_url) as url:
        svg_data = url.read()

    # Convert SVG to PNG using cairosvg
    png_data = cairosvg.svg2png(bytestring=svg_data)

    # Convert the PNG data to a NumPy array
    png_array = np.frombuffer(png_data, dtype=np.uint8)

    # Decode the image using OpenCV
    image = cv.imdecode(png_array, cv.IMREAD_COLOR)

    # Check if the image was loaded successfully
    if image is None:
        print("Error: Could not decode the image.")
    else:
        # Reflect the image with respect to the origin
        reflected_img = reflect_image_origin(image)

        # Display the original and reflected images
        print("Original Image:")
        cv_imshow(image)            # Original image

        print("Reflected Image:")
        cv_imshow(reflected_img)    # Reflected image

except Exception as e:
    print(f"Error: {e}")

import cv2 as cv
import numpy as np
from google.colab.patches import cv2_imshow as cv_imshow
import urllib.request
import cairosvg

def read_svg_image_by_url(url):
    try:
        # Download the SVG image
        with urllib.request.urlopen(url) as req:
            svg_data = req.read()

        # Convert SVG to PNG bytes using cairosvg
        png_data = cairosvg.svg2png(bytestring=svg_data)

        # Decode the PNG bytes directly into an OpenCV image
        nparr = np.frombuffer(png_data, np.uint8)
        img = cv.imdecode(nparr, cv.IMREAD_UNCHANGED)
        return img

    except Exception as e:
        print(f"Error while loading or processing the image: {e}")
        return None

def translate_image(image, tx, ty):
    # Get image dimensions
    height, width = image.shape[:2]

    # Create the translation matrix
    translation_matrix = np.array([
        [1, 0, tx],
        [0, 1, ty]
    ], dtype=np.float32)

    # Apply the translation using warpAffine
    translated_image = cv.warpAffine(image, translation_matrix, (width, height))

    return translated_image

# URL of the SVG image
url = 'https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg'

# Read the SVG image from the URL
img = read_svg_image_by_url(url)

# Check if the image was loaded successfully
if img is not None:
    # Translate the image by -3 along OX and 1 along OY
    tx = -3  # Translation along the x-axis (OX)
    ty = 1   # Translation along the y-axis (OY)

    translated_img = translate_image(img, tx, ty)

    # Display the original and translated images
    cv_imshow(img)
    cv_imshow(translated_img)
else:
    print("Unable to load the image.")